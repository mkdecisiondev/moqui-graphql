apply plugin: 'groovy'

def moquiDir = file(projectDir.absolutePath + '/../../..')
def frameworkDir = file(moquiDir.absolutePath + '/framework')
def componentNode = parseComponent(project)
version = componentNode.@version

// to run use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
buildscript {
  repositories {
      mavenCentral()
      gradlePluginPortal()
  }
  dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.42.0' }
}

dependencyUpdates.resolutionStrategy { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

// maybe in the future: repositories { mavenCentral() }
repositories {
    flatDir name: 'frameworkLib', dirs: frameworkDir.absolutePath + '/lib'
    //flatDir name: 'localLib', dirs: projectDir.absolutePath + '/lib'
    mavenCentral()
}

dependencies {
    implementation project(':framework')
    implementation ('org.elasticsearch.client:transport:7.17.13') {
        exclude group: 'io.netty'
        exclude group: 'org.apache.logging.log4j'
    }

    implementation 'com.graphql-java:graphql-java:21.0'
    implementation 'com.graphql-java:graphql-java-extended-scalars:21.0'
    implementation 'org.antlr:antlr4-runtime:4.5.3'

    // explicit dependencies to get newer versions
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    testImplementation project(':framework').configurations.testImplementation.allDependencies
}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
task cleanLib(type: Delete) { delete fileTree(dir: projectDir.absolutePath+'/lib', include: '*') }
clean.dependsOn cleanLib

jar {
    destinationDir = file(projectDir.absolutePath + '/lib')
    // this is required to change from the default that includes the path to this module (ie 'runtime/base-componet/example')
    baseName = componentNode.@name
}

task copyDependencies {
    doLast {
        copy {
            from(configurations.runtimeClasspath - project(':framework').configurations.runtimeClasspath - project(':framework').jar.archivePath)
            into file(projectDir.absolutePath + '/lib')
        }
    }
}
copyDependencies.dependsOn cleanLib
jar.dependsOn copyDependencies

test {
    dependsOn cleanTest
    include '**/MantleUslSuite.class'
    systemProperty 'moqui.runtime', moquiDir.absolutePath + '/runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevTestConf.xml'
    systemProperty 'moqui.init.static', 'true'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true; testLogging.showExceptions = true

    classpath += files(sourceSets.main.output.classesDirs)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}
